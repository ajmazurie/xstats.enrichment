#!/usr/bin/env python

import optparse, sys, os

p = optparse.OptionParser(usage = "%prog -s|-l [-o] [options]")

p.add_option("-s", "--subset", dest = "subset_fn", metavar = "FILENAME",
	help = "Subset of objects")

p.add_option("-l", "--list", dest = "list_fn", metavar = "FILENAME",
	help = "Ranked list of objects")

p.add_option("-S", "--population-size", type = "int", dest = "population_size", metavar = "INTEGER",
	help = "Size of the population (-s/--subset option)")

p.add_option("-a", "--annotations", dest = "annotations_fn", metavar = "FILENAME",
	help = "Objects annotations, as a tab-delimited text file")

p.add_option("-o", "--output", dest = "output_fn", metavar = "FILENAME",
	help = "Output file (default: stdout)")

p.add_option("-d", "--delimiter", dest = "delimiter", metavar = "CHAR", default = ',',
	help = "Delimiter for input and output file columns. Default: '%default'")

(p, a) = p.parse_args()

def error (msg):
	print >>sys.stderr, "ERROR: %s" % msg
	print >>sys.stderr, "Use --help for a list of options."
	sys.exit(1)

if (p.list_fn) and (not os.path.exists(p.list_fn)):
	error("unable to open '%s'" % p.list_fn)

if (p.subset_fn) and (not os.path.exists(p.subset_fn)):
	error("unable to open '%s'" % p.subset_fn)

if ((not p.list_fn) and (not p.subset_fn)) or (p.list_fn and p.subset_fn):
	error("either a list or a subset of object must be provided")

if (p.subset_fn) and ((not p.population_size) or (p.population_size < 1)):
	error("a population size must be provided")

if (not p.annotations_fn):
	error("an annotation file must be provided")

if (not os.path.exists(p.annotations_fn)):
	error("unable to open '%s'" % p.annotations_fn)

if (not p.output_fn):
	p.output_fn = sys.stdout
else:
	p.output_fn = open(p.output_fn, 'w')

#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

import ui

import csv
import Enrichment

o = csv.writer(p.output_fn, delimiter = p.delimiter)

print >>sys.stderr, "reading annotations from '%s'" % p.annotations_fn

Object2Annotations = {}
Annotation2Objects = {}

for row in csv.reader(open(p.annotations_fn, 'r'), delimiter = p.delimiter):
	object_id = row[0]

	for annotation in row[1:]:
		if (not object_id in Object2Annotations):
			Object2Annotations[object_id] = {}

		if (not annotation in Annotation2Objects):
			Annotation2Objects[annotation] = {}

		Object2Annotations[object_id][annotation] = True
		Annotation2Objects[annotation][object_id] = True

print >>sys.stderr, "  %s objects with %s distinct annotations" % (len(Object2Annotations), len(Annotation2Objects))

o.writerow(("Annotation", "P-value (uncorrected)", "P-value (corrected)"))

if (p.list_fn):
	print >>sys.stderr, "reading ranked list from '%s'" % p.list_fn

	list = []
	seen = {}
	for row in csv.reader(open(p.list_fn, 'r'), delimiter = p.delimiter):
		object_id = row[0]
		list.append(object_id)

		if (object_id in seen):
			error("the list contains duplicate entries")

		seen[object_id] = True

	occurrence = {}
	annotations = {}

	for i, object_id in enumerate(list):
		for annotation in Object2Annotations.get(object_id, []):
			if (not annotation in occurrence):
				occurrence[annotation] = [0 for n in range(len(list))]

			occurrence[annotation][i] = 1
			annotations[annotation] = True

	annotations = sorted(annotations.keys())

	print >>sys.stderr, "  %s objects with %s distinct annotations" % (len(list), len(annotations))

	if (len(annotations) == 0):
		error("none of the object was annotated")

	pb = ui.ProgressBar(len(annotations), offset = 2, stream = sys.stderr)

	uncorrected_pvalues = []

	for i, annotation in enumerate(annotations):
		p_value = Enrichment.mHG(
			occurrence[annotation],
			B = len(Annotation2Objects[annotation]),
			N = len(list)
		)

		uncorrected_pvalues.append(p_value)
		pb.display(i)

	pb.clear()

	corrected_pvalues = Enrichment.fdr(uncorrected_pvalues)

	for i, annotation in enumerate(annotations):
		o.writerow((annotation, uncorrected_pvalues[i], corrected_pvalues[i]))

if (p.subset_fn):
	print >>sys.stderr, "reading subset from '%s'" % p.subset_fn

	subset = []
	seen = {}
	for row in csv.reader(open(p.subset_fn, 'r'), delimiter = p.delimiter):
		object_id = row[0]
		subset.append(object_id)

		if (object_id in seen):
			error("the subset contains duplicate entries")

		seen[object_id] = True

	n = len(subset)
	N = p.population_size

	if (N < n):
		error("invalid population size: the subset is bigger than the value provided")

	b = {}

	for i, object_id in enumerate(subset):
		for annotation in Object2Annotations.get(object_id, []):
			if (not annotation in b):
				b[annotation] = 0

			b[annotation] += 1

	annotations = sorted(b.keys())

	print >>sys.stderr, "  %s objects with %s distinct annotations" % (n, len(annotations))

	if (len(annotations) == 0):
		error("none of the objects is annotated")

	pb = ui.ProgressBar(len(annotations), offset = 2, stream = sys.stderr)

	uncorrected_pvalues = []

	for i, annotation in enumerate(annotations):
		p_value = Enrichment.fisher_exact_test(
			b = b[annotation],
			n = n,
			B = len(Annotation2Objects[annotation]),
			N = N
		)[2]

		uncorrected_pvalues.append(p_value)
		pb.display(i)

	pb.clear()

	corrected_pvalues = Enrichment.fdr(uncorrected_pvalues)

	for i, annotation in enumerate(annotations):
		o.writerow((annotation, uncorrected_pvalues[i], corrected_pvalues[i]))

print >>sys.stderr, "done."
